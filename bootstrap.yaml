- name: Bootstrap Proxmox Node
  hosts: proxmox
  become: yes
  vars_files:
    - variables.yaml
  tasks:
    - name: Disable enterprise source repository
      file:
        path: /etc/apt/sources.list.d/pve-enterprise.list
        state: absent

    - name: Enable no-subscription repository
      lineinfile:
        dest: /etc/apt/sources.list.d/pve-no-subscription.list
        line: "deb http://download.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-no-subscription"
        create: yes
      notify:
        - Update package list

    - name: Update package list
      apt:
        update_cache: yes
        cache_valid_time: 3600
      notify:
        - Upgrade packages

    - name: Install required packages
      apt:
        state: present
        name:
          - vim
          - tmux
          - curl
          - git
          - unzip
          - pigz
          - lm-sensors
          - fwupd
          - testdisk
          - ethtool
          - evtest
          - xauth

    - name: Update LXC images available
      shell: pveam update

    - name: Disable rpcbind
      loop: [target, socket, service]
      systemd:
        name: rpcbind.{{ item }}
        state: stopped
        enabled: no

    - name: Read grub boot options
      shell: "grep -E '^GRUB_CMDLINE_LINUX_DEFAULT=' /etc/default/grub | cut -d'=' -f2- | tr -d '\"'"
      register: cmd_grub_cmdline
      changed_when: false

    - name: Set grub fact
      set_fact:
        grub_cmdline: "{{ cmd_grub_cmdline.stdout }}"

    - name: Enable Intel IOMMU
      set_fact:
        grub_cmdline: "{{ grub_cmdline }} intel_iommu=on"
      when: "'intel_iommu' not in grub_cmdline"

    - name: Enable Intel GPU Virtualization
      set_fact:
        grub_cmdline: "{{ grub_cmdline }} i915.enable_gvt=1"
      when: "'i915.enable_gvt' not in grub_cmdline"

      # WARNING: This disables Spectre CPU patches, but increases CPU speed.
      # USE WITH CAUTION!
    - name: Disable CPU bug mitigations
      set_fact:
        grub_cmdline: "{{ grub_cmdline }} mitigations=off"
      when: "'mitigations' not in grub_cmdline"

    - name: Update GRUB file
      when: "grub_cmdline != cmd_grub_cmdline.stdout"
      lineinfile:
        dest: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="{{ grub_cmdline }}"'
        backup: yes
        insertafter: '^GRUB_CMDLINE_LINUX_DEFAULT='
      notify:
        - Update GRUB

    - name: Enable IOMMU VFIO Virtual Function I/O
      copy:
        dest: /etc/modules-load.d/vfio.conf
        mode: "0644"
        content: |
          vfio
          vfio_iommu_type1
          vfio_pci
          vfio_virqfd

    - name: Check if udisks2 package is installed
      shell: dpkg -s udisks2
      register: udisks2_check
      changed_when: false
      check_mode: no

      # NOTE: Host CPU gets overloaded due to this component.
    - name: Disable udisks2 systemd service if installed
      systemd:
        name: udisks2.service
        state: stopped
        enabled: no
      when: "'is not installed' not in udisks2_check.stdout"

    - name: Disable IPv6
      copy:
        dest: /etc/sysctl.d/90-disable-ipv6.conf
        owner: root
        group: root
        mode: "0644"
        content: |
          net.ipv6.conf.all.disable_ipv6=1
          net.ipv6.conf.lo.disable_ipv6=1
          net.ipv6.conf.default.disable_ipv6=1

      # CVE-2019-11477
    - name: Disable TCP SACK
      sysctl:
        name: net.ipv4.tcp_sack
        value: "0"
        state: present
        sysctl_set: true

    - name: Disable TCP MTU Probing
      sysctl:
        name: net.ipv4.tcp_mtu_probing
        value: "0"
        state: present
        sysctl_set: true

    - name: Disable Swappiness
      sysctl:
        name: vm.swappiness
        value: "0"
        state: present
        sysctl_set: true

    - name: Enable IP forward (routing)
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        sysctl_set: true

    - block:
      - name: Enable TCP Classless Queuing Disciplines (BBR)
        sysctl:
          name: net.core.default_qdisc
          value: fq
          state: present
          sysctl_set: true

      - name: Enable TCP Bottleneck Bandwidth and RRT (BBR)
        sysctl:
          name: net.ipv4.tcp_congestion_control
          # original: cubic reno
          value: bbr
          state: present
          sysctl_set: true

    - name: Set default timezone
      timezone:
        name: "{{ timezone }}"

  handlers:
    - name: Update package list
      apt:
        update_cache: yes
        cache_valid_time: 3600
    - name: Upgrade packages
      apt:
        upgrade: safe
        autoremove: yes
    - name: Update GRUB
      command: update-grub

- name: Setup SSH
  hosts: proxmox
  become: yes
  vars_files:
    - variables.yaml
  vars:
    authorized_keys: "{{ ansible_user_dir }}/.ssh/authorized_keys"
  tasks:
    - when: github_user is defined and github_user != ""
      block:
      - name: Check if authorized_keys file exists
        register: authorized_keys_check
        stat:
          path: "{{ authorized_keys }}"

      - name: Create .ssh directory
        file:
          path: "{{ ansible_user_dir }}/.ssh"
          state: directory
          mode: "0700"
        when: not authorized_keys_check.stat.exists

      - name: Create authorized_keys
        file:
          path: "{{ authorized_keys }}"
          state: touch
          mode: "0600"
        when: not authorized_keys_check.stat.exists

      - name: Check if keys have been setup previously
        shell: |
          grep -q "# -- GITHUB KEYS {{ github_user }}" "{{ authorized_keys }}"
          echo $?
        register: auth_keys_check
        changed_when: false
        check_mode: no

      - name: Download SSH keys from GitHub
        uri:
          url: "https://github.com/{{ github_user }}.keys"
          return_content: yes
        register: github_keys
        when: auth_keys_check.stdout != "0"

      - name: Append SSH keys to authorized_keys file
        shell: |-
          cat << EOF >> "{{ authorized_keys }}"
          # -- GITHUB KEYS {{ github_user }}
          {{ github_keys.content }}
          EOF
        when: auth_keys_check.stdout != "0"

- name: Create Proxmox ACL groups
  hosts: proxmox
  become: yes
  gather_facts: false
  vars_files:
    - variables.yaml
  vars:
    group_name: root
    role_name: Administrator
  tasks:
    - name: Get Proxmox user management groups
      shell: pveum group list
      register: proxmox_groups
      changed_when: false

    - when: proxmox_user is defined and proxmox_user != "" and group_name not in proxmox_groups.stdout
      block:
      - name: Create Proxmox group {{ group_name }}
        shell: pveum group add {{ group_name }}
        register: command
        failed_when: command.rc != 0 and command.rc != 255
        changed_when: true
        ignore_errors: true

      - name: Add {{ role_name }} role to Proxmox group {{ group_name }}
        shell: pveum acl modify '/' -group {{ group_name }} -role {{ role_name }}
        register: command
        changed_when: true
        ignore_errors: true

    - name: Create user {{ proxmox_user }}
      when: proxmox_user is defined and proxmox_user != ""
      shell: pveum user add {{ proxmox_user }}@{{ proxmox_realm }}
      register: command
      failed_when: command.rc != 0 and (command.rc != 2 and "already exists" not in command.stderr)
      changed_when: '"already exists" not in command.stderr'

- name: Setup fail2ban rules for Proxmox
  hosts: proxmox
  become: yes
  gather_facts: false
  tasks:
    - name: Check if fail2ban package is installed
      register: fail2ban
      shell: dpkg -s fail2ban
      changed_when: false
      failed_when: fail2ban.rc != 0 and fail2ban.rc != 1
      ignore_errors: true

    - when: fail2ban.rc == 0
      block:
      - name: Create filter file
        copy:
          dest: /etc/fail2ban/filter.d/proxmox.conf
          content: |
            [Definition]
            failregex = pvedaemon\[.*authentication failure; rhost=<HOST> user=.* msg=.*
            ignoreregex =

      - name: Create jail file
        copy:
          dest: /etc/fail2ban/jail.d/proxmox.conf
          content: |
            [proxmox]
            enabled = true
            port = https,http,8006,8007
            filter = proxmox
            logpath = /var/log/daemon.log
            maxretry = 4
            # 1 hour
            bantime = 3600
            findtime = 600
